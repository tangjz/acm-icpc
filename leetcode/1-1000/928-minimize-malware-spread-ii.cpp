class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size(), ans = INT_MAX, pos = -1;
        sort(initial.begin(), initial.end());
        for(int x: initial) {
            vector<int> dsu(n + 1, -1);
            function<int(int)> dsu_find = [&](int x) -> int {
                return dsu[x] < 0 ? x : (dsu[x] = dsu_find(dsu[x]));
            };
            auto dsu_merge = [&](int u, int v) -> bool {
                u = dsu_find(u);
                v = dsu_find(v);
                if(u == v)
                    return 0;
                if(dsu[u] < dsu[v])
                    swap(u, v);
                dsu[v] += dsu[u];
                dsu[u] = v;
                return 1;
            };
            for(int y: initial)
                if(x != y)
                    dsu_merge(n, y);
            for(int i = 0; i < n; ++i) if(i != x)
                for(int j = i + 1; j < n; ++j) if(j != x)
                    if(graph[i][j])
                        dsu_merge(i, j);
            int tmp = -dsu[dsu_find(n)] - 1;
            if(ans > tmp) {
                ans = tmp;
                pos = x;
            }
        }
        return pos;
    }
};
